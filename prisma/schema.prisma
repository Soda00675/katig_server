// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[] // HasMany Users
}

model User {
  id         Int       @id @default(autoincrement())
  userRoleId Int
  contact    String?
  fullname   String
  username   String    @unique
  email      String    @unique
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userRole   UserRole  @relation(references: [id], fields: [userRoleId], onDelete: Cascade) // BelongsTo UserRole
  boats      Boat[] // HasMany Boats
  payments   Payment[] // HasMany Payments
}

model EmergencyHotline {
  id        Int      @id @default(autoincrement())
  logo      String
  name      String
  contactNo String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmergencyTip {
  id        Int      @id @default(autoincrement())
  logo      String
  name      String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Boat {
  id           Int      @id @default(autoincrement())
  ownerId      Int
  name         String   @unique
  operatorName String
  capacity     Int
  type         String
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  owner        User     @relation(references: [id], fields: [ownerId], onDelete: Cascade) // BelongsTo User (as owner)
}

model BoatBooking {
  id                 Int      @id @default(autoincrement())
  bookingNo          String   @unique
  boatId             Int
  primaryPassengerId Int
  boatType           String
  destinationFrom    String
  destinationTo      String
  departureDate      String
  passengersSet      Json
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Payment {
  id        Int      @id @default(autoincrement())
  payerId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payer     User     @relation(references: [id], fields: [payerId], onDelete: Cascade) // BelongsTo User (as payer)
}
